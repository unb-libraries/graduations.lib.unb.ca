<?php

/**
 * @file
 * Contains award.module.
 */

use Drupal\taxonomy\Entity\Term;

/**
 * Implements hook_preprocess_hook().
 */
function award_preprocess_node__award(&$variables) {
  // Pass additional variables to award templates.
  // Retrieve award nid.
  $award_node = $variables['elements']['#node'];
  $nid = $award_node->id();
  // Query for parent ceremony.
  $ceremony_q = \Drupal::entityQuery('node')
    ->condition('type', 'graduation_ceremony')
    ->condition('field_awards', $nid)
    ->execute();

  // Get ceremony id.
  $ceremony_id = $ceremony_q ? reset($ceremony_q) : NULL;
  // Pass ceremony id.
  $variables['ceremony_id'] = $ceremony_id;
  // Get ceremony object.
  $ceremony = \Drupal::entityTypeManager()
    ->getStorage('node')
    ->load($ceremony_id);
  // Get ceremony title.
  if ($ceremony) {
    $ceremony_title = $ceremony->title->getString();
    // Pass ceremony title.
    $variables['ceremony_title'] = $ceremony_title;
    $debug = $ceremony_title;
  }

  // Pass award recipient.
  $recipient = $award_node->field_recipient->getString();
  $variables['award_recipient'] = $recipient;

  // Pass honorary degree name and description.
  if ($award_node->field_honorary_degree) {
    $degree_id = $award_node->field_honorary_degree->getString();
  }

  if ($degree_id) {
    $degree_term = Term::load($degree_id);
    $degree_short = $degree_term->getName();
    $degree_description = $degree_term->getDescription();
    $variables['degree_short'] = $degree_short;
    $variables['degree_description'] = $degree_description;
  }
  // Pass orator.
  if ($award_node->field_orator_name) {
    $variables['orator'] = $award_node->field_orator_name->getString();
  }

  // Pass faculty award type.
  if ($award_node->field_faculty_award_type) {
    $fac_award_id = $award_node->field_faculty_award_type->getString();
  }

  if ($fac_award_id) {
    $fac_award_term = Term::load($fac_award_id);
    $faculty_award = $fac_award_term->getName();
    $variables['faculty_award'] = $faculty_award;
  }

  // Pass graduate award type.
  if ($award_node->field_grad_award_type) {
    $grad_award_id = $award_node->field_grad_award_type->getString();
  }

  if ($grad_award_id) {
    $grad_award_term = Term::load($grad_award_id);
    $grad_award = $grad_award_term->getName();
    $variables['grad_award'] = $grad_award;
  }
}

/**
 * Implements hook_inline_entity_form_entity_form_alter().
 * Alter award IEF.
 */
function award_inline_entity_form_entity_form_alter(&$entity_form, $form_state) {
  // Only apply changes if the entity is an address.
  if ($entity_form['#bundle'] == 'award') {
    // Recover term ids for all award types.
    $tids = \Drupal::entityQuery('taxonomy_term')
      ->condition('vid', 'award_type')
      ->execute();

    // Build associative array with name => tid for award types.
    $types = [];

    foreach ($tids as $tid) {
      $name = Term::load($tid)->getName();
      $types[$name] = $tid;
    }

    // Form states — Display exclusive fields for graduate award.
    $disp_grad_award = [
      'visible' => [
        ':input[name*="field_award_type"]' => ['value' => $types['Graduate Award']],
      ],
    ];

    $entity_form['field_grad_award_type']['#states'] = $disp_grad_award;

    // Form states — Display exclusive fields for honorary degree.
    $disp_hon_degree = [
      'visible' => [
        ':input[name*="field_award_type"]' => ['value' => $types['Honorary Degree']],
      ],
    ];

    $entity_form['field_honorary_degree']['#states'] = $disp_hon_degree;
    $entity_form['field_recipient_valedictorian']['#states'] = $disp_hon_degree;
    $entity_form['field_recipient_gender']['#states'] = $disp_hon_degree;
    $entity_form['field_orator_name']['#states'] = $disp_hon_degree;

    // Form states — Display exclusive fields for faculty award.
    $disp_fac_award = [
      'visible' => [
        ':input[name*="field_award_type"]' => ['value' => $types['Faculty Award/Honour']],
      ],
    ];

    $entity_form['field_faculty_award_type']['#states'] = $disp_fac_award;

    // Form states — Display for group 1: Honorary Degree, Professor Emeritus.
    $disp_group1 = [
      'visible' => [
        [':input[name*="field_award_type"]' => ['value' => $types['Honorary Degree']]],
        [':input[name*="field_award_type"]' => ['value' => $types['Professor Emeritus']]],
      ],
    ];

    $entity_form['field_image']['#states'] = $disp_group1;
    $entity_form['field_image_caption']['#states'] = $disp_group1;
    $entity_form['field_image_caption2']['#states'] = $disp_group1;
    $entity_form['field_citation']['#states'] = $disp_group1;

    // Add callback function to run when IEF is building an address entity.
    $entity_form['#entity_builders'][] = 'award_title';
  }
}

function award_title($entity_type, $entity, $entity_form, &$form_state) {
  $type = $entity->get('field_award_type')->entity->getName();
  $recipient = $entity->get('field_recipient')->getString();

  switch ($type) {
    case 'Faculty Award/Honour':
      // If faculty award...
      $subtype = $entity->get('field_faculty_award_type')->entity->getName();
      $title = "$subtype awarded to $recipient";
      break;

    case 'Graduate Award':
      // If graduate award...
      $subtype = $entity->get('field_grad_award_type')->entity->getName();
      $title = "$subtype awarded to $recipient";
      break;

    case 'Honorary Degree':
      // If honorary degree...
      $subtype = $entity->get('field_honorary_degree')->entity->getName();
      $title = "Honorary Degree awarded to $recipient ($subtype)";
      break;

    default:
      $title = "$type awarded to $recipient";
      break;
  }

  $entity->setTitle($title);
}

/**
 * Implements hook_theme().
 */
function award_theme($existing, $type, $theme, $path) {
  // Use custom template to display node type.
  return [
    'node__award' => [
      'arguments' => [
        'view' => NULL,
        'field' => NULL,
        'row' => NULL,
        'output' => NULL,
      ],
      'template' => 'node--award',
      'path' => drupal_get_path('module', 'award') . '/templates',
      'base hook' => 'node__award',
    ],
  ];
}
